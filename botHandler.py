import asyncio
from aiogram.utils import executor
from aiogram import Bot
from aiogram.dispatcher import Dispatcher

import pandas as pd
from datetime import datetime, timedelta
import logging
from notifiers import get_notifier

from config_reader import config

# Logging -----> (–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞) (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è)
logging.basicConfig(level=logging.INFO)


class BotHandler:
    def __init__(self, bot_token):
        self.data = None
        self.bot = Bot(bot_token)
        self.dp = Dispatcher(self.bot)
        self.token = bot_token

    def start_polling(self):
        executor.start_polling(self.dp, skip_updates=True)

 # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å -----> (–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤)

    async def handle_excel_file(self, message):
        try:
            if message.document.mime_type == 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet':
                file_info = await self.bot.get_file(message.document.file_id)
                file_path = file_info.file_path
                self.data = pd.read_excel(
                    f'https://api.telegram.org/file/bot{self.token}/{file_path}')

                await self.bot.send_message(message.from_user.id, "–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
            else:
                await self.bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel (xlsx).")
        except Exception as e:
            logging.error(f"Error handling Excel file: {e}")
            await self.bot.send_message(message.from_user.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞.")


#   –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å -----> (–ü–æ–∫–∞–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏)

    async def display_dates_and_names_handler(self, message):
        if self.data is not None:
            message_content = ""
            current_date = datetime.now()
            filtered_data = [(date, name) for date, name in zip(
                self.data[config.datesColumn], self.data[config.namesColumn]) if date >= current_date]
            sorted_data = sorted(filtered_data)

            for idx, (date_value, name_value) in enumerate(sorted_data):
                message_content += f"{idx + 1}. –î–∞—Ç–∞: {date_value.strftime('%d.%m.%Y')}, –°–æ–±—ã—Ç–∏–µ: {name_value}\n"
            await self.bot.send_message(message.from_user.id, message_content)
        else:
            await self.bot.send_message(message.from_user.id,
                                        "–§–∞–π–ª –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")


#  –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –ø–æ –¥–µ–¥–ª–∞–π–Ω—É -----> (–†–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)

    async def check_and_send_deadline_notification(self, message):
        while True:  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            if self.data is not None:
                for idx, x in enumerate(self.data[config.datesColumn]):
                    deadline = x - datetime.now()
                    if timedelta(days=0) <= deadline <= timedelta(days=config.daysLeft):
                        dead_key_name = self.data[config.namesColumn].loc[idx]
                        dead_time = deadline.days

                        if dead_time == 0:
                            dead_time = str(deadline.seconds /
                                            3600).partition('.')[0]
                            await self.send_msg(
                                message.from_user.id, f'üî• –í–ù–ò–ú–ê–ù–ò–ï\n–í—ã—Ö–æ–¥–∏—Ç —Å—Ä–æ–∫: {dead_key_name}\n–û—Å—Ç–∞–ª–æ—Å—å: {dead_time} —á.\n–°—Ä–æ–∫: {x.strftime("%d.%m.%Y")}')
                        else:
                            await self.send_msg(
                                message.from_user.id, f'üî• –í–ù–ò–ú–ê–ù–ò–ï\n–í—ã—Ö–æ–¥–∏—Ç —Å—Ä–æ–∫: {dead_key_name}\n–û—Å—Ç–∞–ª–æ—Å—å: {dead_time} –¥–Ω.\n–°—Ä–æ–∫: {x.strftime("%d.%m.%Y")}')
            else:
                await self.bot.send_message(message.from_user.id,
                                            "–§–∞–π–ª –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")

            await asyncio.sleep(86400)  # –û–∂–∏–¥–∞–Ω–∏–µ 1 –¥–Ω—è (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

    async def send_msg(self, user_id, text):
        await self.bot.send_message(user_id, text)


# –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è-----> (–£–¥–∞–ª–µ–Ω–∏–µ excel )

    def delete_file(self, message):
        if self.data is not None:
            self.data = None
            self.bot.send_message(message.from_user.id, "–§–∞–π–ª —É–¥–∞–ª–µ–Ω.")
        else:
            self.bot.send_message(message.from_user.id,
                                  "–§–∞–π–ª –µ—â–µ –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω.")
